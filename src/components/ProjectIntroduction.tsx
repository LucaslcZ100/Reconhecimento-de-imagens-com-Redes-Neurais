
import React, { useState, useRef, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Brain, Eye, Layers, Zap, ArrowRight, Camera, Cpu, Target, ChevronRight, MousePointer } from 'lucide-react';

interface ProjectIntroductionProps {
  onStartGame: () => void;
}

const ProjectIntroduction = ({ onStartGame }: ProjectIntroductionProps) => {
  const [currentStep, setCurrentStep] = useState(0);
  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });
  const [neurons, setNeurons] = useState<Array<{ id: number; x: number; y: number; active: boolean }>>([]);
  const containerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    // Gerar neur√¥nios para background interativo
    const neuronArray = Array.from({ length: 15 }, (_, i) => ({
      id: i,
      x: Math.random() * 100,
      y: Math.random() * 100,
      active: false
    }));
    setNeurons(neuronArray);
  }, []);

  const handleMouseMove = (e: React.MouseEvent) => {
    if (!containerRef.current) return;
    
    const rect = containerRef.current.getBoundingClientRect();
    const x = ((e.clientX - rect.left) / rect.width) * 100;
    const y = ((e.clientY - rect.top) / rect.height) * 100;
    
    setMousePosition({ x, y });
    
    // Ativar neur√¥nios pr√≥ximos ao mouse
    setNeurons(prev => prev.map(neuron => {
      const distance = Math.sqrt(
        Math.pow(neuron.x - x, 2) + Math.pow(neuron.y - y, 2)
      );
      return {
        ...neuron,
        active: distance < 20
      };
    }));
  };

  const steps = [
    {
      title: "O Que S√£o Redes Neurais?",
      icon: <Brain className="h-8 w-8" />,
      content: "As redes neurais s√£o sistemas de computador inspirados no c√©rebro humano. Elas aprendem a reconhecer padr√µes atrav√©s de exemplos, assim como n√≥s aprendemos a reconhecer objetos quando somos crian√ßas.",
      example: "üß† Assim como voc√™ aprendeu a reconhecer um gato vendo muitos gatos diferentes, a IA aprende vendo milhares de imagens de gatos.",
      details: "Uma rede neural artificial possui camadas de 'neur√¥nios' conectados que processam informa√ß√µes. Cada neur√¥nio recebe dados, aplica uma fun√ß√£o matem√°tica e passa o resultado adiante. Com trilh√µes de conex√µes, a rede aprende padr√µes complexos atrav√©s do treinamento."
    },
    {
      title: "Como a IA V√™ uma Imagem?",
      icon: <Eye className="h-8 w-8" />,
      content: "Para um computador, uma imagem √© apenas uma matriz de n√∫meros representando cores. Cada pixel tem valores de vermelho, verde e azul (RGB) que variam de 0 a 255.",
      example: "üì∏ Uma imagem de 100x100 pixels cont√©m 30.000 n√∫meros que a IA precisa analisar para entender o que est√° vendo.",
      details: "Por exemplo: um pixel branco = (255,255,255), preto = (0,0,0), vermelho puro = (255,0,0). A IA n√£o 'v√™' como n√≥s - ela analisa padr√µes matem√°ticos nestes n√∫meros para identificar bordas, texturas, formas e objetos."
    },
    {
      title: "Camadas de Processamento",
      icon: <Layers className="h-8 w-8" />,
      content: "As redes neurais processam informa√ß√µes em camadas sequenciais. Cada camada extrai caracter√≠sticas diferentes: bordas, formas, texturas e finalmente objetos completos.",
      example: "üîç Primeira camada: detecta linhas ‚Üí Segunda: detecta formas ‚Üí Terceira: reconhece objetos completos",
      details: "Camadas iniciais detectam caracter√≠sticas b√°sicas (linhas, bordas). Camadas intermedi√°rias combinam essas caracter√≠sticas em formas mais complexas (c√≠rculos, ret√¢ngulos). Camadas finais reconhecem objetos espec√≠ficos (gatos, carros, pessoas)."
    },
    {
      title: "Classifica√ß√£o e Confian√ßa",
      icon: <Target className="h-8 w-8" />,
      content: "Na √∫ltima etapa, a rede neural combina todas as caracter√≠sticas identificadas para tomar uma decis√£o final sobre o que est√° vendo na imagem, sempre com um n√≠vel de confian√ßa.",
      example: "üéØ 'Vejo pelos, orelhas pontudas, olhos grandes ‚Üí Isso √© um gato!' (com 95% de confian√ßa)",
      details: "A IA n√£o apenas classifica, mas tamb√©m informa sua 'certeza'. 95% de confian√ßa significa que, de 100 casos similares, ela acertaria 95. Se a confian√ßa for baixa (ex: 60%), pode significar que a imagem √© amb√≠gua ou n√£o est√° no dataset de treinamento."
    }
  ];

  const categories = [
    {
      name: "Seres Vivos",
      shape: "circle",
      color: "bg-yellow-600",
      examples: ["üê± Gato", "üê∂ Cachorro", "üë§ Pessoa", "üêµ Macaco", "üê¥ Cavalo"],
      features: "Formas org√¢nicas, olhos, movimento natural, caracter√≠sticas biol√≥gicas",
      aiPerspective: "A IA identifica padr√µes como simetria facial, presen√ßa de olhos, texturas org√¢nicas e propor√ß√µes t√≠picas de seres vivos."
    },
    {
      name: "Objetos Manufaturados", 
      shape: "rectangle",
      color: "bg-yellow-600",
      examples: ["üöó Carro", "üì± Telefone", "üè† Casa", "üíª Computador", "üìö Livro"],
      features: "Linhas retas, geometria regular, bordas definidas, materiais artificiais",
      aiPerspective: "A IA detecta padr√µes geom√©tricos regulares, superf√≠cies lisas, √¢ngulos de 90 graus e estruturas sim√©tricas criadas pelo homem."
    },
    {
      name: "Elementos Naturais",
      shape: "triangle", 
      color: "bg-yellow-600",
      examples: ["üèîÔ∏è Montanha", "üå≤ √Årvore", "üå∏ Flor", "üçÉ Folha", "‚õ∞Ô∏è Paisagem"],
      features: "Formas irregulares, texturas naturais, assimetria, crescimento org√¢nico",
      aiPerspective: "A IA reconhece padr√µes fractais, texturas irregulares, assimetria natural e estruturas que seguem leis de crescimento org√¢nico."
    }
  ];

  const nextStep = () => {
    if (currentStep < steps.length - 1) {
      setCurrentStep(currentStep + 1);
    }
  };

  const prevStep = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
    }
  };

  return (
    <div
      ref={containerRef}
      onMouseMove={handleMouseMove}
      className="min-h-screen p-6 bg-gradient-to-br from-black via-yellow-900 to-yellow-800 relative overflow-hidden"
    >
      {/* Background interativo */}
      {neurons.map((neuron) => (
        <div
          key={neuron.id}
          className={`absolute w-2 h-2 rounded-full transition-all duration-300 pointer-events-none ${
            neuron.active
              ? 'bg-yellow-400 shadow-lg shadow-yellow-400/50 scale-150'
              : 'bg-yellow-600/20'
          }`}
          style={{
            left: `${neuron.x}%`,
            top: `${neuron.y}%`,
          }}
        />
      ))}

      {/* Cursor seguidor */}
      <div
        className="absolute w-4 h-4 bg-yellow-400 rounded-full opacity-40 pointer-events-none animate-pulse"
        style={{
          left: `${mousePosition.x}%`,
          top: `${mousePosition.y}%`,
          transform: 'translate(-50%, -50%)',
          zIndex: 1
        }}
      />

      <div className="max-w-6xl mx-auto relative z-10">
        {/* Header */}
        <div className="text-center mb-12">
          <h1 className="text-5xl font-bold mb-4 bg-gradient-to-r from-yellow-400 to-yellow-300 bg-clip-text text-transparent">
            Como Funciona o Reconhecimento de Imagens?
          </h1>
          <p className="text-xl text-yellow-200">
            Uma jornada pelos conceitos fundamentais da Intelig√™ncia Artificial
          </p>
          <div className="flex items-center justify-center gap-2 text-sm text-yellow-300 mt-4">
            <MousePointer className="h-4 w-4" />
            <span>Mova o mouse para interagir com os neur√¥nios</span>
          </div>
        </div>

        {/* Passo a passo interativo */}
        <div className="grid lg:grid-cols-2 gap-8 mb-12">
          <Card className="h-fit bg-black border-yellow-600 text-yellow-100">
            <CardHeader>
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <div className="p-2 rounded-lg bg-yellow-600">
                    {steps[currentStep].icon}
                  </div>
                  <CardTitle className="text-yellow-200">
                    {steps[currentStep].title}
                  </CardTitle>
                </div>
                <Badge className="bg-yellow-600 text-black">
                  {currentStep + 1} de {steps.length}
                </Badge>
              </div>
            </CardHeader>
            <CardContent className="space-y-4">
              <p className="text-lg leading-relaxed">
                {steps[currentStep].content}
              </p>
              
              <div className="p-4 rounded-lg border-l-4 bg-yellow-800 border-yellow-400 text-yellow-100">
                <p className="font-medium">Exemplo Pr√°tico:</p>
                <p>{steps[currentStep].example}</p>
              </div>

              <div className="p-4 rounded-lg border-l-4 bg-yellow-700 border-yellow-400 text-yellow-100">
                <p className="font-medium">Detalhes T√©cnicos:</p>
                <p className="text-sm">{steps[currentStep].details}</p>
              </div>
              
              <div className="flex justify-between pt-4">
                <Button
                  onClick={prevStep}
                  disabled={currentStep === 0}
                  variant="outline"
                  className="border-yellow-600 text-black bg-yellow-600 hover:bg-yellow-500"
                >
                  Anterior
                </Button>
                <Button
                  onClick={nextStep}
                  disabled={currentStep === steps.length - 1}
                  className="bg-yellow-600 hover:bg-yellow-500 text-black"
                >
                  Pr√≥ximo <ChevronRight className="h-4 w-4 ml-1" />
                </Button>
              </div>
            </CardContent>
          </Card>

          {/* Visualiza√ß√£o interativa */}
          <Card className="bg-black border-yellow-400 text-yellow-100">
            <CardHeader>
              <CardTitle className="flex items-center gap-2 text-yellow-300">
                <Cpu className="h-6 w-6" />
                Processo em A√ß√£o
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-6">
                {/* Simula√ß√£o visual baseada no passo atual */}
                <div className="p-6 rounded-lg border-2 border-dashed border-yellow-400">
                  {currentStep === 0 && (
                    <div className="text-center">
                      <Brain className="h-20 w-20 mx-auto mb-4 animate-pulse text-yellow-400" />
                      <p>Neur√¥nios artificiais processando informa√ß√µes</p>
                      <div className="grid grid-cols-3 gap-2 mt-4">
                        {Array.from({ length: 9 }).map((_, i) => (
                          <div
                            key={i}
                            className="h-8 bg-gradient-to-r from-yellow-600 to-yellow-500 rounded"
                            style={{ 
                              animationDelay: `${i * 0.2}s`,
                              animation: 'pulse 2s infinite'
                            }}
                          />
                        ))}
                      </div>
                    </div>
                  )}
                  {currentStep === 1 && (
                    <div>
                      <div className="text-center mb-4">
                        <Eye className="h-16 w-16 mx-auto text-yellow-400" />
                        <p className="text-sm">Matriz de Pixels RGB</p>
                      </div>
                      <div className="grid grid-cols-6 gap-1">
                        {Array.from({ length: 36 }).map((_, i) => (
                          <div
                            key={i}
                            className="aspect-square rounded text-xs flex items-center justify-center"
                            style={{ 
                              backgroundColor: `rgb(${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)})`,
                              fontSize: '8px',
                              color: 'white'
                            }}
                          >
                            {Math.floor(Math.random() * 255)}
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                  {currentStep === 2 && (
                    <div className="space-y-4">
                      {['Entrada (Pixels)', 'Conv. 1 (Bordas)', 'Conv. 2 (Formas)', 'Sa√≠da (Objetos)'].map((layer, i) => (
                        <div key={layer} className="flex items-center gap-4">
                          <Badge className="bg-yellow-600 text-black w-16 text-xs">
                            L{i + 1}
                          </Badge>
                          <div className="flex-1 h-3 bg-gray-800 rounded-full overflow-hidden">
                            <div
                              className="h-full bg-gradient-to-r from-yellow-400 to-yellow-500 animate-pulse"
                              style={{
                                width: `${(i + 1) * 25}%`,
                                animationDelay: `${i * 0.5}s`
                              }}
                            />
                          </div>
                          <span className="text-xs text-yellow-300">{layer}</span>
                        </div>
                      ))}
                    </div>
                  )}
                  {currentStep === 3 && (
                    <div className="text-center space-y-4">
                      <Target className="h-20 w-20 mx-auto mb-4 animate-bounce text-yellow-400" />
                      <div className="space-y-2">
                        <p className="text-lg font-semibold">Decis√£o: üê± GATO</p>
                        <div className="space-y-1">
                          <div className="flex justify-between text-sm">
                            <span>Gato:</span>
                            <span className="text-green-400">95.3%</span>
                          </div>
                          <div className="flex justify-between text-sm">
                            <span>Cachorro:</span>
                            <span className="text-yellow-400">3.1%</span>
                          </div>
                          <div className="flex justify-between text-sm">
                            <span>Outros:</span>
                            <span className="text-gray-400">1.6%</span>
                          </div>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Categorias do jogo */}
        <Card className="mb-8 bg-black border-yellow-600">
          <CardHeader>
            <CardTitle className="text-center text-2xl text-yellow-200">
              Categorias que Voc√™ Vai Treinar
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid md:grid-cols-3 gap-6">
              {categories.map((category) => (
                <div
                  key={category.name}
                  className="p-6 rounded-lg border-2 transition-all duration-300 hover:scale-105 bg-black border-yellow-600 hover:border-yellow-400"
                >
                  <div className="text-center space-y-4">
                    <div className={`w-16 h-16 mx-auto rounded-lg ${category.color} flex items-center justify-center text-black text-2xl font-bold`}>
                      {category.shape === 'circle' && '‚óè'}
                      {category.shape === 'rectangle' && '‚ñ†'}
                      {category.shape === 'triangle' && '‚ñ≤'}
                    </div>
                    <h3 className="text-lg font-semibold text-yellow-200">
                      {category.name}
                    </h3>
                    <div className="space-y-2">
                      {category.examples.map((example) => (
                        <Badge
                          key={example}
                          variant="outline"
                          className="block border-yellow-500 text-yellow-200"
                        >
                          {example}
                        </Badge>
                      ))}
                    </div>
                    <p className="text-sm text-yellow-300">
                      {category.features}
                    </p>
                    <div className="text-xs text-yellow-200 bg-yellow-800 p-2 rounded">
                      <strong>Perspectiva da IA:</strong> {category.aiPerspective}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* Se√ß√£o adicional: Como a IA aprende */}
        <Card className="mb-8 bg-black border-yellow-400">
          <CardHeader>
            <CardTitle className="text-center text-2xl text-yellow-300">
              üéì Como a IA Aprende a Reconhecer Imagens?
            </CardTitle>
          </CardHeader>
          <CardContent className="text-yellow-100 space-y-4">
            <div className="grid md:grid-cols-2 gap-6">
              <div className="space-y-3">
                <h4 className="font-semibold text-yellow-400">1. Dataset de Treinamento</h4>
                <p className="text-sm">A IA precisa ver milhares (ou milh√µes) de imagens etiquetadas. Por exemplo: 10.000 fotos de gatos com a etiqueta "gato".</p>
                
                <h4 className="font-semibold text-yellow-400">2. Processo de Aprendizado</h4>
                <p className="text-sm">A rede faz palpites iniciais (geralmente errados), compara com a resposta certa e ajusta seus "pesos" neurais para melhorar.</p>
              </div>
              <div className="space-y-3">
                <h4 className="font-semibold text-yellow-400">3. Valida√ß√£o e Teste</h4>
                <p className="text-sm">Ap√≥s o treinamento, a IA √© testada com imagens que nunca viu antes para verificar se realmente aprendeu os padr√µes.</p>
                
                <h4 className="font-semibold text-yellow-400">4. Melhoria Cont√≠nua</h4>
                <p className="text-sm">Quanto mais dados de qualidade a IA recebe, melhor ela fica em reconhecer novos padr√µes e situa√ß√µes.</p>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Bot√£o para iniciar */}
        <div className="text-center">
          <Button
            onClick={onStartGame}
            size="lg"
            className="text-xl px-12 py-6 font-bold transition-all duration-300 hover:scale-105 bg-gradient-to-r from-yellow-500 to-yellow-400 hover:from-yellow-400 hover:to-yellow-300 text-black shadow-lg shadow-yellow-500/25"
          >
            üöÄ Iniciar Simula√ß√£o de IA
            <ArrowRight className="h-6 w-6 ml-2" />
          </Button>
          <p className="mt-4 text-lg text-yellow-200">
            Agora voc√™ est√° pronto para treinar uma rede neural!
          </p>
        </div>
      </div>
    </div>
  );
};

export default ProjectIntroduction;
